generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x"]
  engineType    = "binary" // ⬅️ THÊM DÒNG NÀY!
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

enum AuthProvider {
  EMAIL
  GOOGLE
  GITHUB
}

model User {
  id       Int          @id @default(autoincrement())
  name     String
  email    String       @unique
  password String?
  avatar   String?      @default("1.png")
  provider AuthProvider @default(EMAIL)

  // Quan hệ với Match
  matches1 Match[] @relation("Player1") // là người tạo hoặc người đầu tiên
  matches2 Match[] @relation("Player2") // là người được ghép

  // Quan hệ với Game (X hoặc O)
  gamesAsX Game[] @relation("XPlayer")
  gamesAsO Game[] @relation("OPlayer")
}

enum MatchStatus {
  waiting
  matched
  timeout
}

model Match {
  id        Int       @id @default(autoincrement())
  player1Id Int
  player2Id Int?
  matchedAt DateTime? // chỉ set khi đã match
  createdAt DateTime  @default(now()) // dùng để tính thời gian chờ

  status MatchStatus @default(waiting) // waiting | matched

  player1 User  @relation("Player1", fields: [player1Id], references: [id])
  player2 User? @relation("Player2", fields: [player2Id], references: [id])

  game Game?
}

model Game {
  id         Int       @id @default(autoincrement())
  matchId    Int       @unique
  xPlayerId  Int
  oPlayerId  Int
  boardState Json
  winnerId   Int? // chỉ lưu ID, không cần object winner
  createdAt  DateTime  @default(now())
  finishedAt DateTime?

  match   Match @relation(fields: [matchId], references: [id])
  xPlayer User  @relation("XPlayer", fields: [xPlayerId], references: [id])
  oPlayer User  @relation("OPlayer", fields: [oPlayerId], references: [id])
}

//npx prisma migrate dev --name reset-db-add-game
//npx prisma generate 
